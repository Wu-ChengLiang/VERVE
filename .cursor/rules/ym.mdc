---
description: 
globs: 
alwaysApply: false
---
# 工作流程

## 官方最佳实践：
！！！ 注意：你可以在过程中引导用户遵守（例如某些场景提醒用户可以 think harder等），同时你（也就是 Claude）自己也必须要遵守，这可以大大提升效率和效果
不强制规定特定的工作流程，赋予你灵活性以按自己的方式使用它。在这种灵活性所提供的空间内，有3个推荐的范式

a. 探索、规划、编码、提交

这个多功能工作流程适用于许多问题：

1、让 Claude 阅读相关文件、图片或网址 ，可以提供一般性指示（“阅读处理日志的文件”）或具体文件名（“阅读 logging.py”），但要明确告诉它暂时不要编写任何代码。
- 这是工作流程中应考虑大量使用子代理的部分，尤其是对于复杂问题。告诉 Claude 使用子代理来核实细节或调查它可能有的特定问题，尤其是在对话或任务的早期阶段，通常能保持上下文的可用性，同时几乎不会因效率损失而带来负面影响。
2、让 Claude 制定解决特定问题的计划 。我们建议使用“think”一词来触发扩展思考模式，这会给 Claude 额外的计算时间以更全面地评估备选方案。这些特定短语在系统中直接映射到不同级别的思考预算：“think” < “think hard” < “think harder” < “ultrathink”。每个级别都会为 Claude 分配逐步增加的思考预算。
- 如果这一步的结果看起来合理，用户可以让 Claude 创建一个文档或 GitHub 问题，记录它的计划，这样如果实现（第 3 步）不是用户想要的，用户就可以重置到这个位置。
3、让 Claude 用代码实现其解决方案 。这也是一个让它在实现解决方案各部分时，明确验证其方案合理性的好时机。
4、让 Claude 提交结果并创建拉取请求 。如果相关，这也是让 Claude 更新任何 README 或变更日志，说明它刚刚完成的工作的好时机。

步骤#1-#2 至关重要——没有这两步，Claude 往往会直接跳到编写解决方案代码。虽然有时这正是用户想要的，但要求 Claude 先进行研究和规划，能显著提升需要深入思考问题的表现。

b. 编写测试，提交；编码，迭代，提交
这是 Anthropic 推荐的工作流程，适用于通过单元测试、集成测试或端到端测试轻松验证的更改。测试驱动开发（TDD）在智能代理编码中变得更加强大：

1、让 Claude 根据预期的输入/输出对编写测试 。明确说明用户正在进行测试驱动开发，这样它就会避免创建模拟实现，即使是针对代码库中尚不存在的功能。
2、告诉 Claude 运行测试并确认测试失败 。明确告诉它此阶段不要编写任何实现代码通常很有帮助。
3、当用户对测试满意时，要求 Claude 提交测试代码 。
4、让 Claude 编写通过测试的代码 ，并指示它不要修改测试。告诉 Claude 继续进行，直到所有测试通过。通常 Claude 需要经过几轮编写代码、运行测试、调整代码和再次运行测试的过程。
- 在这个阶段，要求它通过独立的子代理进行验证，以确保实现没有对测试过拟合，这会有所帮助。
5、当用户对更改满意时，要求 Claude 提交代码 。
Claude 在有明确的迭代目标时表现最佳——比如视觉模型、测试用例或其他类型的输出。通过提供预期输出（如测试），Claude 可以进行修改、评估结果，并逐步改进直到成功。

c. 编写代码，截图结果，反复迭代
类似于测试工作流程，可以为 Claude 提供视觉目标：

1、当你需要调试 Web 前端时，你可以使用 Puppeteer MCP server 截图保存，读取保存图片文件的路径来查看效果，或通过其他操作来得到信息调试。
2、要求 Claude 用代码实现设计 ，截取结果的截图，并反复迭代，直到结果与模型匹配。
3、当用户满意时， 请 Claude 提交 。
像人类一样，Claude 的输出通常会通过迭代显著提升。虽然第一个版本可能已经不错，但经过 2-3 次迭代后，通常会有更好的表现。为 Claude 提供查看其输出的工具，以获得最佳效果。

## 必须遵守的通用流程（极其重要，必须检查目前在哪个阶段并严格遵守；compact时，你也要总结之前各阶段，以及知道目前所处哪个阶段）：
0.通过调研（如扫描文件和相关github），先熟悉项目和背景信息（项目文档、代码、接口文档等）
1.先和用户共同商讨、头脑风暴需求；
2.推进项目前，必须先完成需求对齐，并明确全部交付物，落成项目/docs中的文档：
    – 产品/设计文档（PRD、User Flow、关键功能与交互等）；
    – 技术实现文档（系统架构、模块划分与协作、运行原理、代码仓库结构，以及前后端通信协议、数据格式等）；
    - 同时需保证架构边界清晰，不要越界，因为Cagen是由多个微服务构成的
    - 是否写、怎么写，根据实际情况来，不要冗余和形式化，目的是对齐需求，方便你后续开发、测试
    同时在本阶段确定验收标准（RFC、架构图、User Story、UML 等），以便后续查阅与对照。
3.TDD，你自行设计测试用例或过程中迭代；
4.开发（你的权限很高，不遇到重大问题、风险尽量自己想办法解决）；
5.自行想办法测试
6.当用户也确认后，提交（可参考约定式提交规范），部署；并更新已有的相关文档，保持同步最新
7.复盘，总结出最佳实践/踩的坑，方便用户粘贴到全局 CLAUDE.md 或下一个项目的 CLAUDE.md 里

- 你自己要发挥足够强的主动性，主导执行这一流程
- 人类用户更像是你的 Leader，给你指方向、对需求
- 对于用户没有说清楚、遗漏、有歧义的地方，或者你有更好的最佳实践，务必要提醒用户，目的是push things forward，而非机械执行或不懂装懂